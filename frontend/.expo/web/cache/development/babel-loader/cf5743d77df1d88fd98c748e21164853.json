{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Valentin\\\\Desktop\\\\Developper\\\\LGBTapp\\\\Real\\\\frontend\\\\components\\\\main\\\\Setting.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData } from \"../../redux/actions/index\";\nimport * as ImagePicker from 'expo-image-picker';\n\nfunction Setting(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      SetUser = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      image = _useState4[0],\n      setImage = _useState4[1];\n\n  useEffect(function () {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        SetUser(snapshot.data());\n      } else {\n        console.log(\"Setting user does not exist\");\n      }\n    });\n  }, [props]);\n\n  var ChangeProfile = function ChangeProfile() {\n    var result, uri, childPath, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function ChangeProfile$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [1, 1],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (result.cancelled) {\n              _context.next = 20;\n              break;\n            }\n\n            setImage(result.uri);\n            uri = image;\n            childPath = \"picture/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            console.log(childPath);\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 11:\n            response = _context.sent;\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 14:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('users').doc(firebase.auth().currentUser.uid).set({\n      name: user.name,\n      email: user.email,\n      picture: downloadURL\n    });\n  };\n\n  if (user === null) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.navigation.navigate(\"Profile\", {\n        uid: firebase.auth().currentUser.uid\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/fleche.jpg\"),\n    style: {\n      flex: 1,\n      width: 48,\n      height: 48\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, user.picture ? React.createElement(Image, {\n    source: {\n      uri: user.picture\n    },\n    style: {\n      width: 48,\n      height: 48,\n      borderRadius: 10,\n      position: 'absolute',\n      margin: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }) : React.createElement(Image, {\n    source: require(\"../../assets/friend.png\"),\n    style: {\n      width: 256,\n      height: 256,\n      borderRadius: 10,\n      alignItems: 'stretch'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: {\n      height: 60,\n      alignItems: 'flex-end'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"Change profile picture\",\n    onPress: function onPress() {\n      return ChangeProfile();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  })), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"Name: \"), React.createElement(TextInput, {\n    placeholder: user.name,\n    style: styles.textInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, user.name), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, user.email)));\n}\n\nvar styles = StyleSheet.create({\n  header: {\n    flex: 1,\n    padding: 12,\n    marginRight: 25\n  },\n  container: {\n    flex: 1,\n    textAlign: 'center',\n    padding: 25,\n    marginTop: 25\n  },\n  textInput: {\n    fontSize: 20,\n    borderColor: \"thistle\",\n    textShadowColor: '#585858',\n    borderColor: 'black',\n    borderWidth: 1,\n    borderRadius: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Setting);","map":{"version":3,"sources":["C:/Users/Valentin/Desktop/Developper/LGBTapp/Real/frontend/components/main/Setting.js"],"names":["React","useState","useEffect","firebase","require","connect","bindActionCreators","fetchUsersData","ImagePicker","Setting","props","user","SetUser","image","setImage","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","ChangeProfile","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","cancelled","uri","childPath","Math","random","toString","fetch","response","blob","task","storage","ref","child","put","taskProgress","bytesTransferred","taskCompleted","getDownloadURL","savePostData","taskError","on","downloadURL","set","name","email","picture","styles","header","navigation","navigate","flex","width","height","container","borderRadius","position","margin","alignItems","textInput","StyleSheet","create","padding","marginRight","textAlign","marginTop","fontSize","borderColor","textShadowColor","borderWidth","mapStateToProps","store","users","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, View, Text, TextInput, Image, TouchableOpacity, FlatList, StyleSheet } from 'react-native';\r\n\r\nimport firebase from 'firebase';\r\nrequire('firebase/firestore')\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux'\r\nimport { fetchUsersData } from '../../redux/actions/index'\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nfunction Setting(props) {\r\n\r\n    const [user, SetUser] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        firebase.firestore()\r\n        .collection(\"users\")\r\n        .doc(firebase.auth().currentUser.uid)\r\n        .get()\r\n        .then((snapshot) => {\r\n            if (snapshot.exists) {\r\n                SetUser(snapshot.data())\r\n            } else {\r\n                console.log(\"Setting user does not exist\")\r\n            }\r\n        })\r\n    }, [props])\r\n\r\n    const ChangeProfile = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [1, 1],\r\n            quality: 1,\r\n        });\r\n        console.log(result);\r\n      \r\n        if (!result.cancelled) {\r\n            setImage(result.uri);\r\n            const uri = image;\r\n            const childPath = `picture/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`;\r\n            console.log(childPath)\r\n\r\n            const response = await fetch(uri);\r\n            const blob = await response.blob();\r\n\r\n            const task = firebase\r\n                .storage()\r\n                .ref()\r\n                .child(childPath)\r\n                .put(blob);\r\n\r\n            const taskProgress = snapshot => {\r\n                console.log(`transferred: ${snapshot.bytesTransferred}`)\r\n            }\r\n\r\n            const taskCompleted = () => {\r\n                task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n                    savePostData(snapshot);\r\n                    console.log(snapshot)\r\n                })\r\n            }\r\n\r\n            const taskError = snapshot => {\r\n                console.log(snapshot)\r\n            }\r\n\r\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\r\n        }\r\n    }\r\n\r\n    const savePostData = (downloadURL) => {\r\n\r\n        firebase.firestore()\r\n            .collection('users')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .set({\r\n                name: user.name,\r\n                email: user.email,\r\n                picture: downloadURL\r\n            })\r\n    }\r\n\r\n    if (user === null) {\r\n        return <View />\r\n    }\r\n\r\n    return (\r\n        <View style={styles.header}>\r\n            <TouchableOpacity\r\n                onPress={() => props.navigation.navigate(\"Profile\", {uid: firebase.auth().currentUser.uid})}\r\n            >\r\n                <Image\r\n                    source={require('../../assets/fleche.jpg')}\r\n                    style={{flex: 1, width: 48, height: 48}}\r\n                />\r\n            </TouchableOpacity>\r\n            <View style={styles.container}>\r\n             {user.picture ? (\r\n                    <Image\r\n                        source={{uri: user.picture}}\r\n                        style={{width: 48, height: 48, borderRadius: 10, position: 'absolute', margin: 20}}\r\n                    />) : (\r\n                    <Image\r\n                        source={require('../../assets/friend.png')}\r\n                        style={{width: 256, height: 256, borderRadius: 10, alignItems: 'stretch'}}\r\n                    />\r\n                )}\r\n\r\n            <TouchableOpacity\r\n                style={{height: 60, alignItems: 'flex-end'}}\r\n            >\r\n                <Button\r\n                    title=\"Change profile picture\"\r\n                    onPress={() => ChangeProfile()}\r\n                />\r\n            </TouchableOpacity>\r\n\r\n            <Text>Name: </Text>\r\n\r\n            <TextInput\r\n                placeholder={user.name}\r\n                style={styles.textInput}\r\n                \r\n            />\r\n            <Text>{user.name}</Text>\r\n            <Text>{user.email}</Text>\r\n            \r\n            </View>\r\n        </View>\r\n    )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    header: {\r\n        flex: 1,\r\n        padding: 12,\r\n        marginRight: 25\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        textAlign: 'center',\r\n        padding: 25,\r\n        marginTop: 25\r\n    },\r\n    textInput: {\r\n        fontSize: 20,\r\n        borderColor: \"thistle\",\r\n        textShadowColor:'#585858',\r\n        borderColor: 'black',\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n    }\r\n})\r\n\r\nconst mapStateToProps = (store) => ({\r\n    users: store.usersState.users\r\n})\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Setting);"]},"metadata":{},"sourceType":"module"}